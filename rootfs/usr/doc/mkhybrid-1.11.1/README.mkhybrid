
	mkhybrid v1.11.1 - make ISO9660/HFS/JOLIET shared hybrid CD volume

HFS and JOLIET hybrid code Copyright (C) James Pearson 1997, 1998
libhfs code Copyright (C) 1996, 1997 Robert Leslie
mkisofs code Copyright 1993 Yggdrasil Computing, Incorporated

This code is now reasonable stable, and no longer considered Beta level
software. However, please read the restrictions given in the "Known
problems" below.

This will be the last release of mkhybrid in its current form.
I plan to add the HFS and Apple's ISO9660 extensions to the new release
of mkisofs (v1.12 - currently in beta release) which already includes
support for Joliet (see http://andante.jic.com/mkisofs.html). I also
hope to support more Apple/Unix file formats.

mkhybrid is now available to run under Win95/NT. mkhybrid has been compiled
with Cygnus' GNU-Win32 and is available as a self-extracting archive from
ftp://ftp.ge.ucl.ac.uk/pub/mkhfs/mkhybrid-win32.exe. For more info on
GNU-Win32 see: http://www.cygnus.com/misc/gnu-win32/.

Description:

mkhybrid is a version of mkisofs (based on mkisofs v1.11) that can
create an ISO9660/HFS/JOLIET shared hybrid CD volume. HFS (Hierarchical File
System) is the native filesystem format used on Macintosh computers and
Joliet is Microsoft's extensions to ISO9660 for Windows95 and NT4.

An ISO9660/HFS/JOLIET hybrid CD is "seen" as an HFS volume by Macintosh and
"seen" as an ISO9660 volume (with or without RockRidge or Joliet extensions)
by other machines, but the data in the files is the same.

Although a Macintosh can read ISO9660 volumes (with or without Apple's
ISO9660 extensions), there are many benefits in "seeing" the data as
an HFS volume (long filenames, full access to various Finder flags
etc.). However, there are occasions when using Apple's ISO9660
extensions may be more appropriate (see Implementation notes below). In
these cases, the Apple ISO9660 extensions can been added instead of the
HFS hybrid volume.

The Joliet extensions allow (amongst other things) long filenames to be seen
when used on Windows95 and NT4 machines.

This code is largely an amalgamation of "mkhfs" and "mkisofs with Apple
extensions" (see http://www.ge.ucl.ac.uk/~jcpearso/software.html) plus
my implementation of the Joliet Specification (see
http://www.ms4music.com/devl/jolspec.htm).

The HFS code uses a modified version of Robert Leslie's libhfs (included
with this distribution), which is part of his hfsutils
(http://www.mars.org/home/rob/proj/hfs/) package. The hfsutils tools
are not needed for building mkhybrid, but they are very useful for
checking the resulting output file. Hfsutils is available from
ftp://ftp.mars.org/pub/hfs (also at: ftp://ftp.ge.ucl.ac.uk/pub/mkhfs). 

The HFS hybrid code does not alter the ISO9660 filesystem structures
(except for starting blocks of the files), so ISO9660/RockRidge/HFS/JOLIET
hybrid CDs can created.


Using:

The Joliet and HFS extensions are independent of each other, so
ISO9660/HFS, ISO9660/JOLIET or ISO9660/HFS/JOLIET hybrids can be created.

The Joliet extensions are added using the -J (or -j) flag.

As well as a Macintosh file having a "data" and "resource" fork (see
below), there are two important properties associated with each file
which define which application created the file, the CREATOR and what
data the file contains, the TYPE. The TYPE and CREATOR for a Mac file
can be set in two ways:

1. If the files in the directory tree are stored in the "AUFS" file format
then the TYPE and CREATOR (and any "finder flags") are taken from the finder
information associated with the file.

For more information on the Aufs file format see:

http://www.cs.mu.oz.au/appletalk/atalk.html

AUFS == Apple-Unix Filesystem and is used by the Columbia AppleTalk
Package (CAP) to mount a Unix directory tree on a Macintosh. The AUFS
file format is described below (modified from the aufs(1) man page):

     Macintosh files consist of two separate parts known as the
     "data" and "resource" forks. In addition, there is "finder"
     information kept for the file. The aufs(1) format stores  a
     three-part Macintosh file as follows:

     Each UNIX directory that will store Macintosh files contains
     two subdirectories named .finderinfo and .resource. The
     Macintosh data fork is stored directly in the main directory
     with usually the same name as seen on the Macintosh. The
     Macintosh resource fork and finder information are stored
     (with the same name as the data fork) in the .resource and
     .finderinfo subdirectories, respectively.

mkhybrid will take the TYPE and CREATOR from the information in the
.finderinfo sub-directory. The .finderinfo and .resource sub-directories
are not added to the ISO9660 disk image - nor are ".ADeskTop",
".IDeskTop" and "Network Trash Folder" (these are used by AUFS, but can
be ignored as far as making a CD is concerned).

2. If the files are not stored in the AUFS format, then a CREATOR and
TYPE can be added based on the Unix filename extension using a "mapping"
file. The format of this file is the same afpfile format as used by
aufs(1). This file has five columns for the extension, file translation,
CREATOR, TYPE and Comment. Lines starting with the '#' character are comment
lines and are ignored. An example file would be like:

# Example filename mapping file
#
# EXTN   XLate   CREATOR   TYPE     Comment
.tif     Raw     '8BIM'    'TIFF'   "Photoshop TIFF image"
.hqx     Ascii   'BnHq'    'TEXT'   "BinHex file"
.doc     Raw     'MSWD'    'WDBN'   "Word file"
.mov     Raw     'TVOD'    'MooV'   "QuickTime Movie"
*        Ascii   'ttxt'    'TEXT'   "Text file"

Where:

	The first column (EXTN) defines the Unix filename
	extension to be mapped. The default mapping for any
	filename extension that doesn't match is defined with
	the "*" character.

	The Xlate column defines the type of text translation
	between the Unix and Macintosh file - it is ignored by
	mkhybrid, but is kept to be compatible with aufs(1).

	The CREATOR and TYPE keywords must be 4 characters long
	and enclosed in single quotes.

	The comment field is enclosed in double quotes - it is
	ignored by mkhybrid, but is kept to be compatible with
	aufs.


The mapping file is used by giving the extra command line option "-H"
i.e.
	mkhybrid -H mapping_file ...

To create an HFS hybrid CD without having a mapping file, use the option
"-h" (the -H mapping_file option implies -h). See the file "mapping"
for an example of this layout.

Without either -H or -h, mkhybrid will work exactly like mkisofs.

The "resource fork" information is stored as an ISO9660 "associated"
file. This is just like any normal file stored in the ISO9660 filesystem
except that the associated file flag is set in the Directory Record (bit
2). This file has the same name as the data fork (the file seen by
non-Apple machines). Associated files are normally ignored by machines
seeing the ISO9660 volume. 

It is also possible to add the Apple extensions to ISO9660 instead of 
creating an HFS hybrid. The TYPE and CREATOR are added to a file in
a similar way as described above, except the flags -G and -g are used
instead of -H and -h respectively.

The TYPE and CREATOR are stored in the optional System Use or SUSP field
in the ISO9660 Directory Record - in much the same way as the RockRidge
attributes are. In fact to make life easy, I've just added Apple's stuff
at the beginning of the existing RockRidge attributes (i.e. to get the Apple
extensions you have to have the RockRidge extensions as well).

The "resource fork" information is also stored as described above.

A CD created with these extensions is not really an HFS "hybrid" as no HFS
information is stored.


Installation:

To build, just type "./configure" to generate the Makefile. Make any
changes to the Makefile and type "make". This should create the modified
libhfs.a and mkhybrid executable. I haven't changed the "configure"
script, so if your system doesn't use "ranlib", then you should change the
line RANLIB=ranlib to RANLIB=echo in the Makefile.

This has been tested with gcc on SunOS 4.1.3 (see below), gcc on Linux
(Redhat v4.1) and cc on IRIX 5.3

If you are using SunOS 4.1.[34], then you need the following patches
to read CDs with associated files:

SunOS 4.1.3:		Patch 101832-05
SunOS 4.1.3_U1:		Patch 101833-02
SunOS 4.1.4:		Patch 102583-02


Known problems and limitations:

 HFS:

I have had to make several assumptions on how I expect the modified
libhfs routines to work, however there may be situations that either
I haven't thought of, or come across when these assumptions fail.
Therefore I can't guarantee that mkhybrid will work as expected
(although I haven't had a major problem yet).

Can not have multiple (hard) linked files in the source directory tree.
HFS, I believe, does not have the concept of multiple directory entries
pointing to the same file. This works OK for an ISO9660 volume, but
mkhybrid will exit with an error if it finds a hard link in the given
source directory tree.

Output volume size must be at least 800Kb (libhfs limit - shouldn't
really be a problem).

Although HFS filenames appear to support upper and lower case letters,
the filesystem is case insensitive. i.e. the filenames "aBc" and "AbC"
are the same. If a file is found in a directory with the same HFS name,
then mkhybrid will exit with an error.

These HFS additions have not been tested with the mkisofs "-i", "-M"
or "-f" options. Most other options should not interfere with these
additions, but there may be problems. If used simply (i.e. a single
source directory tree), then mkhybrid should work OK. In, fact the
mkisofs man page recommends not using the "-i" or "-M" options.
(The -M option has no real meaning with an HFS volume).

Symbolic links (as with all other non-regular files) are not added to
the HFS directory.

Hybrid volumes may be larger than pure ISO9660 volumes containing the
same data (see Implementation notes below).

The resulting hybrid volume can be accessed on a Unix machine by using
the hfsutils routines. However, no changes should be made to the
contents of the volume as it's not a "real" HFS volume.

If the Apple extensions are used, then only the ISO9660 filenames will
appear on the Mac. However, as the Macintosh ISO9660 drivers can use
"Level 2" filenames, then you can use the "-l" option without problems on
a Macintosh - still take care over the names, for example "this.file.name"
will be converted to "THIS.FILE" i.e. only have one ".", also filename
"abcdefgh" will be seen as "ABCDEFGH", but "abcdefghi" will be seen as
"ABCDEFGHI." i.e.  with a "." at the end - don't know if this is a Mac
problem or mkisofs/mkhybrid problem. All filenames will be in uppercase
when viewed on a Mac. Of course, DOS/Win3.X machines will not be able
to see Level 2 filenames...


 Joliet:

Some Joliet CDs may not be readable on NT4 but are OK on Win95 (not absolutely
sure why, but may have something do to with the directory sort order).

Multi-session support (-M option) for Joliet has not been added (mainly
because I've never needed to create a multi-session CD). It would need a
lot of work to add multi-session support. Will probably not work with the -i
option.

The Joliet spec allows for directories deeper than 8. This has not (yet)
been implemented. Deep directories will be relocated unless the -D
option is used (see the man page).

Non-valid characters in the filenames or length of filenames and paths
are checked - filenames are truncated to 64 characters and non-valid
characters are changed to "_". However, this may result in two or more
filenames having the same name ...

I *think* the sort order for directories and their contents is correct.

Joliet output has only been tested on a Linux machine ... therefore I
can only assume that a CD created with my Joliet extensions will be
readable on a PC.


To do (may or may not be done):

The resulting HFS volume does not have an HFS partition map at the
beginning - I had expected to create one. However, looking at some
existing hybrid HFS CDs, it looks like you don't need one (i.e. a CD
can be treated more like a floppy than a hard disk). I may add an HFS
partition map if it is really needed ...

Deep Joliet directories (already including in mkisofs v1.12)


Implementation: (these notes are to remind me what I did!)

[This section can skipped, unless you want to look at the source code]

 HFS:

There are now (v0.48a and above) two ways to create an HFS hybrid CD. The
first method creates a "true" HFS hybrid by making the CD look like an
HFS volume to a Macintosh - the files are accessed by a Mac through the
HFS volume. The second method uses Apple's extensions to ISO9660 - the
files are accessed by a Mac through the ISO9660 filesystem. The TYPE and
CREATOR fields are stored in the ISO9660 directory.

1. HFS volume:

An HFS/ISO9660 hybrid CD is possible because systems reading an ISO9660
disk will ignore the first 16 sectors (32Kb). These sectors are usually
blank. However, a Macintosh will first check to see if a CD has an HFS
filesystem by reading the HFS volume headers in the first few blocks on
the CD (if these can't be found, then the Mac will look for the ISO9660
volume header).

All the extra code in the original source files are included in
#define APPLE_HYB blocks (you will notice a "-DAPPLE_HYB" at the end of
the "CFLAGS=" line in the Makefile). The extra code is in the files
apple.[ch], desktop.c, volume.c and hybrid.h (in libhfs_iso). All the
original source files that have been modified have been renamed filename.dist.

Obtaining the Apple finder information is fairly straight forward as this
has already been done for the "mkhfs" code (see
http://www.ge.ucl.ac.uk/~jcpearso/mkhfs.html) and adding the resource
fork file to the ISO9660 directory is similarly taken from "mkisofs with
Apple extensions" (see http://www.ge.ucl.ac.uk/~jcpearso/mkisofs.html)

The difficult part is modifying the ISO9660 and HFS layout without
compromising either. The main changes are:

The ISO9660 filesystems is basically very simple - consisting of a set
of directory records immediately followed by all the data files one
after the other. Each file starts at an ISO9660 sector boundary which
is 2048 bytes and the files are contiguous. Therefore the "cluster" or
"allocation" block size is always 2048 bytes no matter how many files
there are or how large the volume is. This means the files are packed
very efficiently, which is fine for a read-only filesystem.

The HFS filesystem on the other hand, is a read/write filesystem with
a "cluster" or "allocation" block size that depends on the size of the
volume. Files can be fragmented, deleted, created etc. The directory
structure is reasonably complicated.  To add to this, the libhfs routines
expect that the HFS volume exists and can be written to and read from
as files are added. Unfortunately the ISO9660 volume doesn't exist until
it's written out, but by then then it's too late to alter the internal
layout of the volume ... 

The first problem is to work out the size of the HFS volume - the
starting point is the expected size of the ISO volume, but if the
calculated HFS "allocation size" is greater that the ISO 2048 byte block size,
then the space required by each file needs to be increased (to pad out
to the new allocation size) and the size re-calculated (which may result in a
new allocation size etc. In this case, the files will take up more space than
in a pure ISO9660 filesystem.

The HFS allocation size is a multiple of 512 bytes, but I need the minimum
allocation space for a file to be a multiple of 2048 bytes. Previously
(versions 0.31a and earlier), I had used the HFS "clump size" as this is
set at four time the "allocation block size" - which is always a
multiple of 2048. Newer versions round up the allocation size to a
multiple of 2048. Savings can be significant with a large volume containing
lots of smallish files.

Once the volume size is known, the HFS volume can be "created", but as
the libhfs routines expect to read/write from/to an existing file, the
low level read and write routines need to be modified to either
read/write a memory copy of the HFS header/directory info, or in the
case of normal files, ignored - no file data is written when the HFS
internal structures are being built up, but later when the ISO9660 data
is written out. This is useful as there is no need to know (or
understand) what the libhfs routines are actually doing.

One part of the HFS file system is the "Catalog" file - on a "normal"
HFS file system, this would be allowed to grow (in much the same way as
any other file) as more files are added to the volume - but as I need to
know how big the volume will be before I add files, I can't let this
file "grow". On most HFS volumes, the size of the Catalog file is 
twice its initial size - this is the size I set it to. Unfortunately,
in certain cases, this file can get larger. Therefore in v0.45a (and
above), I've added code to re-create the volume if a larger Catalog file is
needed - I don't know enough about the inner workings of HFS, so I can't
workout the size of the Catalog file in advance, therefore, this
approach is a bit over the top as it involves throwing away the "volume"
we have created and trying again. I allow this to happen 4 times before
giving up.

All that needs to be done after a file has been "written" to the HFS
volume, is to adjust HFS starting block to coincide with the ISO9660
starting block of the same file.

Unfortunately, changing where the HFS filesystem thinks the files are,
means that the HFS volume bit map (which blocks are allocated to files)
no longer corresponds to where files actually are - this is fairly easy
to fix - just set the whole volume bit map (all in use). This is fine as
we can't add anything to our HFS volume anyway!

The last bit to do is to modify the HFS "header" to point to where the
special extents and catalog files are stored (the HFS "directory"). These
have been built up in memory and are written out at the end of the
ISO9660 volume (normally they start out at the beginning of the volume,
but putting them at the end doesn't seem to matter ...)

2. Apple's ISO9660 extensions

mkhybrid is based on earlier changes I made to mkisofs to add the Apple
extensions for ISO9660 (see http://www.ge.ucl.ac.uk/~jcpearso/mkisofs.html).
Therefore most the work already exists in mkhybid - all I have done
is re-introduce these additions.

The main advantange of using these extentions over the HFS volume is
that files are stored in the normal ISO9660 way with no "padding" to
account for HFS allocation blocks (described above). Therefore, this
method allows for a lot more "small" files to be packed into a "large"
volume. The disadvantage is that you are limited to the ISO9660
filenames (see above).


 JOLIET

Being an operating system independent filesystem, the ISO9660 spec 
has some very limiting constraints on the length of filenames and
characters used in the filenames. The ISO9660 spec does recognise that
this will cause problems on some operating systems and allows for
machine dependent extensions. Some extensions are already well known,
i.e. Rock Ridge and the Apple extensions.

Normally, and ISO9660 CD has a single "Primary Volume Descriptor" (PVD)
that defines where on the CD the directory structures are stored. These
contain filenames, attributes and location of the files.

The Joliet extensions make use of the optional extra Supplementary Volume
Descriptor. This contains the location of a separate set of directory
structures that contain long filenames, attributes and location of the
files - which are the same as above. Any Rock Ridge attributes are
stored with the PVD, so the Joliet extensions are independent of Rock
Ridge.

Most of the routines I've used are copies of routines used with the
PVD - I've modified the copies and prepended the routine names with "j_".
All the Joliet code is included in #define JOLIET blocks. Comments in
the code give the details.


Useful information about ISO9660 can found in "Introduction to ISO 9660"
(a PFD file) at http://www.mediatel.lu/workshop/storage/h_storage.html

The full Joliet specs can be found at http://www.ms4music.com/devl/jolspec.htm


Changes between versions are listed in ChangeLog.mkhybrid with details
given in comments in the code.


If you want to test this routine without burning a CD, write the output
to a floppy disk - the Mac will mount it as a CD ...


Any comments to me at the address below.

Any new versions may be found at:

ftp://ftp.ge.ucl.ac.uk/pub/mkhfs

James Pearson
+------------------------------------------------------------------------+
Dept. Geomatic Engineering		Email: j.pearson@ps.ucl.ac.uk
University College London		  WWW: http://www.ge.ucl.ac.uk
Gower Street
London	WC1E 6BT
England
